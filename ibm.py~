import itertools as it

class IBM:

    def __init__(self, sentences):
        # For holding the data - initialized in read_data()
        self.words = {} #2d array of [e][f] words
        self.sentences = sentences[:];

    def parse_words(self):

        spanish_words = {}
        for (en_sent, es_sent) in self.sentences:
            for word in en_sent: self.words[word] = {}
            for word in es_sent: spanish_words[word] = 1 # using 1 to mark existence

        uniform_val = 1.0 / len(self.words)

        for en_word in self.words:
            for es_word in spanish_words:
                self.words[en_word][es_word] = uniform_val

    def EM(self):

        count = {}
        for en_word in self.words: count[en_word] = {}
        total = {lambda: 0}

        for (en_sent, es_sent) in self.sentences:
            for en_word in en_sent:
                total_s = 0
                for es_word in es_sent:
                    total_s += self.words[en_word][es_word]

                total_s = float(total_s)
                for es_word in es_sent:
                    print en_word
                    print es_word
                    #count[en_word][es_word] += self.words[en_word][es_word] / total_s
                    total[es_word] += self.words[en_word][es_word] / total_s

        for en_word in self.words:
            for es_word in self.words[en_word]:
                count[en_word][es_word] = count[en_word][es_word] / total[es_word]

        return count

    def translate(self, sentence):
        self.parse_words()
        self.EM()               # called over and over again
        return self.words

def main():

    sentences = [(["green","house", "blue"], ["casa","verde"]), (["the", "house"], ["la", "casa"])]
    ibm = IBM(sentences)

    print ibm.translate("house green")

if __name__ == '__main__':
    main()
